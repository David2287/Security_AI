import os
import logging
import asyncio
import yaml
from typing import Dict, Any
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
from src.file_security_analyzer import FileSecurityAnalyzer
from src.security_ai_consultant import SecurityAIConsultant
from src.network_security_analyzer import EnhancedSecurityAnalyzer
from models.trained_models.model_trainer import ModelTrainer


class SecurityAIApplication:
    def __init__(self, config_path: str = '../config/config.yaml'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            config_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        """
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = self._load_configuration(config_path)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_ai = SecurityAIConsultant(self.config)
        self.file_analyzer = FileSecurityAnalyzer(self.config)
        self.network_analyzer = EnhancedSecurityAnalyzer(self.config)
        self.model_trainer = ModelTrainer(self.config)

    def _load_configuration(self, config_path: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞.

        Args:
            config_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.
        """
        try:
            with open(config_path, 'r') as config_file:
                return yaml.safe_load(config_file)
        except FileNotFoundError:
            logging.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return {}
        except yaml.YAMLError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        log_config = self.config.get('logging', {})
        log_level = getattr(logging, log_config.get('level', 'INFO').upper())
        log_file = log_config.get('file', '../logs/security_ai.log')

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(log_file), exist_ok=True)

        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )

    async def interactive_mode(self):
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        while True:
            try:
                command = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏): ").strip().lower()

                if command == 'exit':
                    break
                elif command == 'help':
                    self._print_help_menu()
                elif command == 'question':
                    await self._handle_question_command()
                elif command == 'file':
                    await self._handle_file_command()
                elif command == 'network':
                    await self._handle_network_command()
                elif command == 'train':
                    await self._handle_train_command()
                else:
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

            except KeyboardInterrupt:
                print("\n–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    def _print_help_menu(self):
        """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ –º–µ–Ω—é."""
        help_text = """
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        - question: –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        - file:     –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        - network:  –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏
        - train:    –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        - exit:     –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        print(help_text)

    async def _handle_question_command(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–æ–ø—Ä–æ—Å–∞."""
        question = input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ")
        response = self.security_ai.generate_response(question)
        print(f"\nü§ñ –û—Ç–≤–µ—Ç: {response}")

    async def _handle_file_command(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞."""
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ")
        if os.path.exists(file_path):
            analysis = await self.file_analyzer.analyze_file(file_path)
            print(f"\nüìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")
        else:
            print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def _handle_network_command(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏."""
        target = input("–í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ –¥–æ–º–µ–Ω: ")
        reputation = self.network_analyzer.network_reputation_check(target)
        vulnerabilities = self.network_analyzer.vulnerability_scan(target)

        print(f"\nüåê –†–µ–ø—É—Ç–∞—Ü–∏—è —Å–µ—Ç–∏: {reputation}")
        print(f"\nüö® –£—è–∑–≤–∏–º–æ—Å—Ç–∏: {vulnerabilities}")

    async def _handle_train_command(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        dataset_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö: ")
        self.model_trainer.train_model(dataset_path)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    try:
        app = SecurityAIApplication()
        asyncio.run(app.interactive_mode())
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()